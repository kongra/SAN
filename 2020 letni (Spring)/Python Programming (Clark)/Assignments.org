* Assignment 1. Write a procedure that computes a root
   of degree 3 (cube root) for the given number x.
   Hint: Use improvement like: ((x / y^2) + 2y) / 3

* Assignment 2. https://projecteuler.net/problem=2
   Hint: even number n is n such that
   n % 2 == 0

* Assignment 3. https://projecteuler.net/problem=5
   Use lists and/or generators

* Assignment 4. https://projecteuler.net/problem=4
   Palidrome: 12321

* Assignment 5. https://projecteuler.net/problem=9
* Assignment 6.
  Use the stack implementation as a basis for create a queue collection.
  QUEUE = FIFO (First In First Out)
* Assignment 7.
  Create a procedure that having passed a list of strings, returns a dictionary containing these strings as keys togehter with their lengths:
  foo(['abc', 'xy', 'w', '']) => {'abc' : 3, 'xy' : 2, 'w' : 1, '' : 0}

* Assignment 8 [*, for volunteers only].
  Create a procedure that generates (use yield) the elements of a powerset of a given sequence.
  powerset([1, 2, 3]) => [[], [1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3]]
  POWERSET = set of all subsets of a given set (including an empty set)
  if the size of s1 is N, then the size of powerset(s1) is 2**N
* Assignment 9.
  Write down a procedure that takes a function f operating on natural numbers and returns
  a function that tells if calling f on its argument resulted in an odd number.
* Assignment 10 [*, for volunteers only]
  - Create a procedure that generates a cartesian product of 2 input sequences. The sequences
    may be generators or simple lists.
  - Create a procedure that maps the cartesian product elements (e.g. tuples) through a function
